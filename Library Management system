import tkinter as tk
from tkinter import ttk, messagebox


class LibraryManagementSystem:
    def __init__(self, root):
        self.root = root
        self.root.title("Library Management System")
        self.root.geometry("800x500")

        # Book database (list of dictionaries)
        self.books = []

        # Title frame
        title = tk.Label(self.root, text="Library Management System", font=("Arial", 20, "bold"), pady=10)
        title.pack()

        # Fields for book information
        frame = tk.Frame(self.root)
        frame.pack(pady=10)

        tk.Label(frame, text="Title:").grid(row=0, column=0, padx=5, pady=5)
        self.title_var = tk.StringVar()
        tk.Entry(frame, textvariable=self.title_var).grid(row=0, column=1, padx=5, pady=5)

        tk.Label(frame, text="Author:").grid(row=0, column=2, padx=5, pady=5)
        self.author_var = tk.StringVar()
        tk.Entry(frame, textvariable=self.author_var).grid(row=0, column=3, padx=5, pady=5)

        tk.Label(frame, text="Year:").grid(row=1, column=0, padx=5, pady=5)
        self.year_var = tk.StringVar()
        tk.Entry(frame, textvariable=self.year_var).grid(row=1, column=1, padx=5, pady=5)

        tk.Label(frame, text="Status:").grid(row=1, column=2, padx=5, pady=5)
        self.status_var = tk.StringVar(value="Available")
        ttk.Combobox(frame, textvariable=self.status_var, values=["Available", "Checked Out"]).grid(row=1, column=3, padx=5, pady=5)

        # Buttons
        btn_frame = tk.Frame(self.root)
        btn_frame.pack(pady=10)

        tk.Button(btn_frame, text="Add Book", command=self.add_book).grid(row=0, column=0, padx=5, pady=5)
        tk.Button(btn_frame, text="Update Book", command=self.update_book).grid(row=0, column=1, padx=5, pady=5)
        tk.Button(btn_frame, text="Remove Book", command=self.remove_book).grid(row=0, column=2, padx=5, pady=5)
        tk.Button(btn_frame, text="Search Book", command=self.search_book).grid(row=0, column=3, padx=5, pady=5)

        # Table for displaying books
        self.tree = ttk.Treeview(self.root, columns=("title", "author", "year", "status"), show="headings")
        self.tree.pack(fill=tk.BOTH, expand=1)
        self.tree.heading("title", text="Title")
        self.tree.heading("author", text="Author")
        self.tree.heading("year", text="Year")
        self.tree.heading("status", text="Status")
        self.tree.bind("<Double-1>", self.select_book)

        # Populate table with dummy data
        self.populate_table()

    def populate_table(self):
        for book in self.books:
            self.tree.insert("", tk.END, values=(book["title"], book["author"], book["year"], book["status"]))

    def clear_table(self):
        for row in self.tree.get_children():
            self.tree.delete(row)

    def refresh_table(self):
        self.clear_table()
        self.populate_table()

    def add_book(self):
        title = self.title_var.get()
        author = self.author_var.get()
        year = self.year_var.get()
        status = self.status_var.get()

        if not title or not author or not year:
            messagebox.showerror("Error", "All fields are required!")
            return

        self.books.append({"title": title, "author": author, "year": year, "status": status})
        self.refresh_table()
        messagebox.showinfo("Success", "Book added successfully!")

    def select_book(self, event):
        selected = self.tree.focus()
        values = self.tree.item(selected, "values")

        if values:
            self.title_var.set(values[0])
            self.author_var.set(values[1])
            self.year_var.set(values[2])
            self.status_var.set(values[3])

    def update_book(self):
        selected = self.tree.focus()
        if not selected:
            messagebox.showerror("Error", "No book selected!")
            return

        values = self.tree.item(selected, "values")
        for book in self.books:
            if book["title"] == values[0] and book["author"] == values[1]:
                book["title"] = self.title_var.get()
                book["author"] = self.author_var.get()
                book["year"] = self.year_var.get()
                book["status"] = self.status_var.get()
                break

        self.refresh_table()
        messagebox.showinfo("Success", "Book updated successfully!")

    def remove_book(self):
        selected = self.tree.focus()
        if not selected:
            messagebox.showerror("Error", "No book selected!")
            return

        values = self.tree.item(selected, "values")
        self.books = [book for book in self.books if not (book["title"] == values[0] and book["author"] == values[1])]

        self.refresh_table()
        messagebox.showinfo("Success", "Book removed successfully!")

    def search_book(self):
        search_window = tk.Toplevel(self.root)
        search_window.title("Search Book")
        search_window.geometry("400x200")

        tk.Label(search_window, text="Search by Title/Author/Year:").pack(pady=10)
        search_var = tk.StringVar()
        tk.Entry(search_window, textvariable=search_var).pack(pady=5)

        def perform_search():
            query = search_var.get().lower()
            results = [book for book in self.books if query in book["title"].lower() or query in book["author"].lower() or query in book["year"]]
            
            if results:
                self.clear_table()
                for book in results:
                    self.tree.insert("", tk.END, values=(book["title"], book["author"], book["year"], book["status"]))
            else:
                messagebox.showinfo("No Results", "No books found!")
                self.refresh_table()

        tk.Button(search_window, text="Search", command=perform_search).pack(pady=10)


# Main application
if __name__ == "__main__":
    root = tk.Tk()
    app = LibraryManagementSystem(root)
    root.mainloop()
